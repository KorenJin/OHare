                                                               ~ ~  Project ID  ~ ~ 

rasi-ohare

                                                          ~ ~ Firewall Rules Creation ~ ~ 

gcloud compute --project=rasi-ohare firewall-rules create firewall-django --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:8080 --source-ranges=0.0.0.0/0 --target-tags=rest-django

gcloud compute --project=rasi-ohare firewall-rules create postgres-db --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:5432 --source-tags=rest-django --target-tags=postgres-db

gcloud compute --project=rasi-ohare firewall-rules create kong-proxy --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:8000 --source-ranges=0.0.0.0/0 --target-tags=kong-instance

gcloud compute --project=rasi-ohare firewall-rules create kong-admin-api --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:8001 --source-ranges=0.0.0.0/0 --target-tags=kong-instance

                                                            ~ ~ Databases Creation ~ ~ 

Insumos / Supply DB:

gcloud compute instances create supply-db --project=rasi-ohare --zone=us-central1-a --machine-type=e2-micro --network-interface=network-tier=PREMIUM,subnet=default --maintenance-policy=MIGRATE --provisioning-model=STANDARD --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=postgres-db --create-disk=auto-delete=yes,boot=yes,device-name=mongo-db-instance,image=projects/cos-cloud/global/images/cos-101-17162-40-13,mode=rw,size=10,type=projects/rasi-ohare/zones/us-central1-a/diskTypes/pd-standard --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

    # Inside the SHH of the instance:

docker run --restart=always -d -e POSTGRES_USER=supply_user -e POSTGRES_DB=supply_db -e POSTGRES_PASSWORD=isis2503 -p 5432:5432 --name supply-db postgres

docker ps -a

    # ~ #

Historia clinica / Medical History DB:

gcloud compute instances create medicalhistory-db --project=rasi-ohare --zone=us-central1-a --machine-type=e2-micro --network-interface=network-tier=PREMIUM,subnet=default --maintenance-policy=MIGRATE --provisioning-model=STANDARD --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=postgres-db --create-disk=auto-delete=yes,boot=yes,device-name=mongo-db-instance,image=projects/cos-cloud/global/images/cos-101-17162-40-13,mode=rw,size=10,type=projects/rasi-ohare/zones/us-central1-a/diskTypes/pd-standard --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

    # Inside the SHH of the instance:

>>> docker run --restart=always -d -e POSTGRES_USER=medicalhistory_user -e POSTGRES_DB=medicalhistory_db -e POSTGRES_PASSWORD=isis2503 -p 5432:5432 --name medicalhistory-db postgres

>>> docker ps -a

    # ~ #

                                                         ~ ~ API Gateway Kong Creation ~ ~ 

gcloud compute instances create kong-instance --project=rasi-ohare --zone=us-central1-a --machine-type=e2-micro --network-interface=network-tier=PREMIUM,subnet=default --maintenance-policy=MIGRATE --provisioning-model=STANDARD --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=kong-instance --create-disk=auto-delete=yes,boot=yes,device-name=mongo-db-instance,image=projects/cos-cloud/global/images/cos-101-17162-40-13,mode=rw,size=10,type=projects/rasi-ohare/zones/us-central1-a/diskTypes/pd-standard --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

    # Inside the SHH of the instance:

>>> docker run -d --name kong-database -p 5432:5432 -e "POSTGRES_USER=kong" -e "POSTGRES_DB=kong" -e "POSTGRES_PASSWORD=kong" postgres

>>> docker ps -a

>>> docker run --rm --link kong-database:kong-database -e "KONG_DATABASE=postgres" -e "KONG_PG_HOST=kong-database" -e "KONG_PG_USER=kong" -e "KONG_PG_PASSWORD=kong" -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database" kong kong migrations bootstrap

>>> docker run -d --name kong --link kong-database:kong-database -e "KONG_DATABASE=postgres" -e "KONG_PG_HOST=kong-database" -e "KONG_PG_PASSWORD=kong" -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database" -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" -e "KONG_PROXY_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl" -p 8000:8000 -p 8443:8443 -p 8001:8001 -p 8444:8444 kong

>>> docker ps -a

    # ~ #

Open http://<ip_externa_kong>:8000

It should show:
{"message":"no Route matched with those values"}

                                                          ~ ~ Microservices Creation ~ ~ 

Insumos / Supply MS:

gcloud compute instances create supply-ms --project=rasi-ohare --zone=us-central1-a --machine-type=e2-micro --network-interface=network-tier=PREMIUM,subnet=default --maintenance-policy=MIGRATE --provisioning-model=STANDARD --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=rest-django --create-disk=auto-delete=yes,boot=yes,device-name=app-no-pattern,image=projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20221018,mode=rw,size=10,type=projects/rasi-ohare/zones/us-central1-a/diskTypes/pd-standard --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

    # Inside the SHH of the instance:

>>> sudo apt update

>>> sudo apt install python3-pip -y

>>> export LC_ALL=C

>>> git clone https://github.com/KorenJin/OHare.git

>>> cd RasiMedicalApp/microservices/supply

>>> pip install --upgrade Django

>>> pip install --upgrade psycopg2

>>> pip install --upgrade psycopg2-binary

>>> pip install --upgrade requests

>>> sudo nano supply/settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'supply_db',
        'USER': 'supply_user',
        'PASSWORD': 'isis2503',
        'HOST': 'internal_ip of the db instance',
        'PORT': '5432'
    }
}

ctrl+x -> y -> enter

    # ~ #

Historia clinica / Medical History MS:

gcloud compute instances create medicalhistory-ms --project=rasi-ohare --zone=us-central1-a --machine-type=e2-micro --network-interface=network-tier=PREMIUM,subnet=default --maintenance-policy=MIGRATE --provisioning-model=STANDARD --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=rest-django --create-disk=auto-delete=yes,boot=yes,device-name=app-no-pattern,image=projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20221018,mode=rw,size=10,type=projects/rasi-ohare/zones/us-central1-a/diskTypes/pd-standard --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

    # Inside the SHH of the instance:

>>> sudo apt update

>>> sudo apt install python3-pip -y

>>> export LC_ALL=C

>>> git clone https://github.com/KorenJin/OHare.git

>>> cd RasiMedicalApp/microservices/medicalhistory

>>> pip install --upgrade Django

>>> pip install --upgrade psycopg2

>>> pip install --upgrade psycopg2-binary

>>> pip install --upgrade requests

>>> sudo nano medicalhistory/settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'medicalhistory_db',
        'USER': 'medicalhistory_user',
        'PASSWORD': 'isis2503',
        'HOST': 'internal_ip of the db instance',
        'PORT': '5432'
    }
}

ctrl+x -> y -> enter

    # ~ #

                                                      ~ ~ Django Project Creation Commands ~ ~ 

"django-admin startproject project_name"

cd RasiMedicalApp/microservices

django-admin startproject supply
django-admin startproject medicalhistory

"python manage.py startapp app_name"

cd supply
python manage.py startapp rasimed

cd ../medicalhistory
python manage.py startapp rasimed

# (When OHare is the root)
cd RasiMedicalApp/microservices/supply 

python manage.py makemigrations
python manage.py migrate
python manage.py runserver 0.0.0.0:8080 # For remote hosting
python manage.py runserver # For local hosting

# When a table is not being created
python manage.py makemigrations <table_name>
python manage.py migrate <table_name>

python manage.py makemigrations supply
python manage.py migrate supply